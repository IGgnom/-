using System;
using System.Xml;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Практика
{
    //Все очень стремно
    class Params
    {
        // Массивы со значениями ширины столбцов и высоты строк для Страницы 1 
        //Не листай вправо, подумай
        public byte[] P1ColumnWidth = new byte[] { 8, 5, 7, 6, 1, 5, 5, 3, 20, 15, 10, 25, 45, 5, 5, 5, 3, 2, 5, 2, 20, 5 };
        public byte[] P1RowHeight = new byte[] { 5, 15, 8, 8, 8, 8, 8, 5, 3, 8, 8, 8, 8, 8, 8, 8, 1, 7, 8, 7, 1, 8, 8, 8, 8, 2, 6, 8, 8, 3, 5, 8, 8, 4, 4, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5 };

        //Массивы с индексами ячеек для объединения и рисования границ для Страницы 1 
        //И тут тоже не листай, подумай
        public byte[] P1BorderIndex = new byte[] { 2, 4, 35, 21, 2, 2, 17, 3, 21, 2, 45, 3, 38, 2, 45, 11, 41, 14, 42, 21, 37, 12, 40, 21, 41, 12, 45, 13 };
        public byte[] P1MergeIndexY1 = new byte[] { 2, 9, 21, 27, 31, 35, 41, 2, 9, 21, 27, 31, 35, 41, 8, 17, 20, 26, 30, 34, 38, 39, 40, 41, 42, 43, 44, 45, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 34, 38, 39, 40, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 34, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 37, 38, 41, 41, 41, 42, 42, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 34, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 34, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 34, 1, 18, 46, 46, 46 };
        public byte[] P1MergeIndexY2 = new byte[] { 8, 17, 26, 30, 34, 40, 45, 8, 17, 26, 30, 34, 40, 45, 9, 18, 21, 27, 31, 35, 38, 39, 40, 41, 42, 43, 44, 45, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 35, 38, 39, 40, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 35, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 35, 38, 39, 40, 41, 42, 43, 44, 45, 37, 40, 45, 41, 41, 42, 42, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 35, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 35, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 35, 1, 20, 46, 46, 46 };
        public byte[] P1MergeIndexX1 = new byte[] { 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 12, 12, 12, 14, 17, 17, 19, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 2, 2, 4, 10, 14 };
        public byte[] P1MergeIndexX2 = new byte[] { 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 21, 21, 13, 16, 20, 18, 20, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 3, 9, 11, 21 };

        //Массив с текстом и адресами его вставки для Страницы 1 
        //Ну не листай
        public string[,] P1FillingText = new string[,] { { "B2", "B9", "B21", "B27", "B31", "B35", "B41", "B1", "D2", "E2", "G2", "I2", "M2", "R2", "T2", "D39", "D40", "H40", "K40", "D42", "D43", "F40", "J40", "D41", "D44", "D45", "N41", "Q41", "U41", "M46", "N46", "D46" }, { "Перв. примен", "Справ. №", "Подп. и дата", "Инв. № дубл.", "Взам. инв. №", "Подп. и дата", "Инв. № подл.", "ГОСТ 2.106 - 96 Форма 1   ", "Формат", "Зона", "Поз.", "Обозначение", "Наименование", "Кол.", "Приме -       чание", "ВВ", "Изм", "№ докум.", "Дата", "Пров.", "Т. контр.", "Лист", "Подп.", "Разраб.", "Н. контр.", "Утв.", "Лит.", "Лист", "Листов", "Копировал", "Формат A4", "Контрольная сумма:" } };
        public string[,] P1TextAlignment = new string[,] { { "B1", "D40", "H40", "K40", "D42", "D43", "J40", "D41", "D44", "D45", "B46", "D46", "J46", "M46", "N46" }, { "Right", "Left", "Left", "Left", "Left", "Left", "Left", "Left", "Left", "Left", "Right", "Right", "Left", "Left", "Right" } };
        public string[] P1TextRotation = new string[] { "B2", "B9", "B18", "B21", "B27", "B31", "B35", "B41", "D2", "E2", "G2", "R2", "C2", "T2" };

        // Массивы со значениями ширины столбцов и высоты строк для Страницы 2
        //Не листай вправо, подумай [x2]
        public byte[] P2ColumnWidth = new byte[] { 8, 5, 7, 6, 1, 5, 5, 3, 20, 15, 10, 25, 63, 10, 12, 10, 5 };
        public byte[] P2RowHeight = new byte[] { 5, 15, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 1, 8, 8, 8, 8, 2, 6, 8, 8, 3, 5, 8, 8, 4, 4, 8, 8, 8, 8, 7, 1, 8, 1, 5, 2, 3, 5, 5 };

        //Массивы с индексами ячеек для объединения и рисования границ для Страницы 2 
        //И тут тоже не листай, подумай [x2]
        public byte[] P2BorderIndex = new byte[] { 2, 4, 45, 16, 19, 2, 45, 3 };
        public byte[] P2MergeIndexY1 = new byte[] { 19, 25, 29, 33, 39, 19, 25, 29, 33, 39, 18, 24, 28, 32, 38, 41, 43, 42, 45, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 30, 31, 32, 34, 35, 36, 37, 38, 40, 42, 43, 45, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 30, 31, 32, 34, 35, 36, 37, 38, 40, 42, 43, 45, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 30, 31, 32, 34, 35, 36, 37, 38, 40, 43, 42, 18, 24, 28, 32, 38, 18, 24, 28, 32, 38, 42, 44, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 30, 31, 32, 34, 35, 36, 37, 38, 40, 43, 1, 16, 46, 46, 46 };
        public byte[] P2MergeIndexY2 = new byte[] { 24, 28, 32, 38, 45, 24, 28, 32, 38, 45, 19, 25, 29, 33, 39, 41, 44, 42, 45, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 42, 44, 45, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 42, 44, 45, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 44, 45, 19, 25, 29, 33, 39, 19, 25, 29, 33, 39, 43, 45, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 44, 1, 18, 46, 46, 46 };
        public byte[] P2MergeIndexX1 = new byte[] { 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 11, 12, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 10, 2, 2, 4, 10, 14 };
        public byte[] P2MergeIndexX2 = new byte[] { 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 16, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 15, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 10, 16, 3, 9, 11, 16 };

        //Массив с текстом и адресами его вставки для Страницы 2
        //Ну не листай [x2]
        public string[,] P2FillingText = new string[,] { { "D2", "E2", "G2", "I2", "M2", "N2", "O2", "B1", "B19", "B25", "B29", "B33", "B39", "D43", "D45", "F45", "H45", "J45", "K45", "P42", "D46", "M46", "N46" }, { "Формат", "Зона", "Поз.", "Обозначение", "Наименование", "Кол.", "Приме -       чание", "ГОСТ 2.106 - 96 Форма 1a  ", "Подп. и дата", "Инв. № дубл.", "Взам. инв. №", "Подп. и дата", "Инв. № подл.", "ВВ", "Изм", "Лист", "№ докум.", "Подп.", "Дата", "Лист", "Контрольная сумма:", "Копировал", "Формат А4" } };
        public string[,] P2TextAlignment = new string[,] { { "B1", "B46", "D45", "F45", "H45", "J45", "K45", "D46", "J46", "M46", "N46" }, { "Right", "Right", "Left", "Left", "Left", "Left", "Left", "Right", "Left", "Left", "Right" } };
        public string[] P2TextRotation = new string[] { "D2", "E2", "G2", "B16", "B19", "B25", "B29", "B33", "B39", "O2" };

        // Массивы со значениями ширины столбцов и высоты строк для Страницы изменений
        //Не листай вправо, подумай [x3]
        public byte[] P3ColumnWidth = new byte[] { 8, 5, 7, 6, 4, 6, 12, 10, 8, 7, 9, 2, 18, 18, 18, 24, 17, 7, 10 };
        public byte[] P3RowHeight = new byte[] { 5, 10, 7, 18, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 1, 8, 8, 8, 8, 2, 6, 8, 8, 3, 5, 8, 8, 4, 4, 8, 8, 8, 8, 7, 1, 8, 1, 5, 2, 3, 5, 5 };

        //Массивы с индексами ячеек для объединения и рисования границ для Страницы изменений
        //И тут тоже не листай, подумай [x3]
        public byte[] P3TextWrap = new byte[] { 2, 4, 4, 19, 18, 2, 20, 3, 16, 2, 18, 3};
        public byte[] P3BorderIndex = new byte[] { 2, 4, 44, 19, 18, 2, 44, 3 };
        public byte[] P3MergeIndexY1 = new byte[] { 18, 24, 28, 32, 38, 18, 24, 28, 32, 38, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 39, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 39, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 39, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 39, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 39, 17, 17, 17, 17, 17, 23, 23, 23, 23, 23, 27, 27, 27, 27, 27, 31, 31, 31, 31, 31, 37, 37, 37, 37, 37, 40, 3, 4, 4, 4, 3, 3, 3, 3, 3, 41, 42, 41, 42, 44, 41, 42, 44, 41, 42, 44, 42, 41, 43, 15, 45, 45, 45, 45 };
        public byte[] P3MergeIndexY2 = new byte[] { 23, 27, 31, 37, 44, 23, 27, 31, 37, 44, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 24, 25, 26, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 24, 25, 26, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 24, 25, 26, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 24, 25, 26, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 24, 25, 26, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 18, 18, 18, 18, 18, 24, 24, 24, 24, 24, 28, 28, 28, 28, 28, 32, 32, 32, 32, 32, 38, 38, 38, 38, 38, 40, 3, 4, 4, 4, 4, 4, 4, 4, 4, 44, 43, 41, 43, 44, 41, 43, 44, 41, 43, 44, 43, 42, 44, 17, 45, 45, 45, 45 };
        public byte[] P3MergeIndexX1 = new byte[] { 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 13, 14, 15, 16, 17, 13, 14, 15, 16, 17, 13, 14, 15, 16, 17, 13, 14, 15, 16, 17, 13, 14, 15, 16, 17, 4, 6, 6, 8, 10, 14, 15, 16, 17, 18, 12, 4, 5, 5, 5, 7, 7, 7, 9, 9, 9, 11, 19, 19, 2, 4, 9, 14, 17 };
        public byte[] P3MergeIndexX2 = new byte[] { 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 19, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 13, 14, 15, 16, 17, 13, 14, 15, 16, 17, 13, 14, 15, 16, 17, 13, 14, 15, 16, 17, 13, 14, 15, 16, 17, 19, 13, 7, 9, 12, 14, 15, 16, 17, 19, 18, 4, 6, 6, 6, 8, 8, 8, 10, 10, 10, 11, 19, 19, 3, 8, 11, 15, 19 };

        //Массив с текстом и адресами его вставки для Страницы изменений
        //Ну не листай [x3]
        public string[,] P3FillingText = new string[,] { { "D2", "D3", "F3", "F4", "H4", "J4", "M4", "N3", "O3", "P3", "Q3", "R3", "B18", "B24", "B28", "B32", "B38", "D42", "D44", "E44", "G44", "I44", "K44", "S41", "D45", "N45", "Q45" }, { "Лист регистрации изменений", "Изм.", "Номера листов (страниц)", "измен-   нённых", "заме-       нённых", "новых", "анули-    рован-        ных", "Всего листов (стра-        ниц) в докум.", "№ докумен.", "Входящ. № сопровод. документа         и дата", "Подпись", "Дата", "Подп. и дата", "Инв. № дубл.", "Взам. инв. №", "Подп. и дата", "Инв. № подл.", "ВВ", "Изм.", "Лист", "№ докум.", "Подп.", "Дата", "Лист", "Контрольная сумма:", "Копировал", "Формат А4" } };
        public string[,] P3TextAlignment = new string[,] { { "D42", "E44", "G44", "I44", "K44", "S41", "B45", "D45", "I45", "N45", "Q45" }, { "Left", "Left", "Left", "Left", "Left", "Left", "Right", "Right", "Left", "Left", "Right" } };
        public string[] P3TextRotation = new string[] { "B15", "B18", "B24", "B28", "B32", "B38"};

        //Массив адрессов для вставки на Страницу 1
        public string[] Header = new string[] { "L38", "L41", "C2", "H41", "H42", "H44", "H45", "B18" };

        //Список из массивов с данными для сортировки
        public ArrayList DataList = new ArrayList();

        //Переменные данных и манипуляции данными из XML
        public int Length { get; set; }
        public int Counter { get; set; }
        public bool ToNextPage { get; set; }
        public bool SecondWorksheet { get; set; }
        public int MoveIndex { get; set; }
        public int Page { get; set; }
        public int SplitNextOld { get; set; }
        public string RazdelOld { get; set; }
        public string Razdel { get; set; }
        public string Format { get; set; }
        public string Obozn { get; set; }
        public string Naimen0 { get; set; }
        public string Order { get; set; }
        public string Prim { get; set; }
        public string Pos { get; set; }
        public string Naimen1 { get; set; }
        public string Naimen2 { get; set; }
        public string Naimen3 { get; set; }
        public string Kol { get; set; }
        public string EdIzm { get; set; }

        //Перевод из миллиметров в понятные для Excel единицы
        //Ширина
        public double ToWidth(double Mills)
        {
            return Mills * 0.5145;
        }

        //Высота
        public double ToHeight(double Mills)
        {
            return Mills * 2.834646;
        }

        //Метод разбиения строки на подстроки определенной длины, для переноса по ячейкам 
        //Стремно, но работает
        public string[] SplitRows(string InputString, byte Length, byte ColumnIndex)
        {
            var List = new List<string>();
            string str = "";

            if (ColumnIndex == 1)
            {
                if (InputString.Length >= Length)
                {
                    string[] words = InputString.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
                    for (int i = 0; i < words.Length; i++)
                    {
                        try
                        {
                            str = words[i] + " " + words[i + 1] + " " + words[i + 2];
                        }
                        catch
                        {
                            try
                            {
                                str = words[i] + " " + words[i + 1];
                                if (str.Length > Length)
                                {
                                    List.Add(words[0]);
                                    List.Add(words[1]);
                                }
                            }
                            catch
                            {
                                str = words[i];
                                if (str.Length <= Length)
                                {
                                    List.Add(str);
                                    i++;
                                }
                                break;
                            }
                        }

                        if (str.Length <= Length)
                        {
                            List.Add(str);
                            i += 2;
                        }
                        else
                        {
                            str = words[i] + " " + words[i + 1];
                            if (str.Length <= Length)
                            {
                                List.Add(str);
                                i++;
                            }
                        }
                    }
                }
                else
                {
                    List.Add(InputString);
                }
            }
            else if (ColumnIndex == 2)
            {
                if (InputString.Length >= Length)
                {
                    string[] words = InputString.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
                    for (int i = 0; i < words.Length; i++)
                    {
                        if (words.Length % 2 == 0)
                        {
                            str = words[i] + " " + words[i + 1];
                            if (str.Length >= Length)
                            {
                                str = words[i];
                                List.Add(str);
                                List.Add(words[i + 1]);
                                i++;
                            }
                            else
                            {
                                if (str.Contains(";"))
                                {
                                    List.Add(words[i]);
                                    List.Add(words[i + 1]);
                                    i++;
                                }
                                else
                                {
                                    List.Add(str);
                                    i++;
                                }
                            }
                        }
                        else
                        {
                            if (i == words.Length - 1)
                            {
                                str = words[i];
                                List.Add(str);
                            }
                            else
                            {
                                str = words[i] + " " + words[i + 1];
                                if (str.Length >= Length)
                                {
                                    str = words[i];
                                    List.Add(str);
                                }
                                else
                                {
                                    if (str.Contains(";") && str.Substring(str.Length - 1) != ";")
                                    {
                                        List.Add(words[i]);
                                        List.Add(words[i + 1]);
                                        i++;
                                    }
                                    else
                                    {
                                        List.Add(str);
                                        i++;
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (InputString.Contains(";"))
                    {
                        string[] words = InputString.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
                        List.Add(words[0]);
                        try
                        {
                            List.Add(words[1]);
                        }
                        catch { }
                    }
                    else
                    {
                        List.Add(InputString);
                    }
                }
            }

            return List.ToArray();
        }

        //Метод нужный для циклического заполнения данными из узла  XML
        public void SetData(XmlNode Node, XmlNode Attributes)
        {
            switch (Attributes.Value)
            {
                case "Format":
                    Format = Node.InnerText;
                    break;
                case "Obozn":
                    Obozn = Node.InnerText;
                    break;
                case "Naimen0":
                    Naimen0 = Node.InnerText;
                    break;
                case "Order":
                    Order = Node.InnerText;
                    break;
                case "Prim":
                    Prim = Node.InnerText;
                    break;
                case "Pos":
                    Pos = Node.InnerText;
                    break;
                case "Naimen1":
                    Naimen1 = Node.InnerText;
                    break;
                case "Naimen2":
                    Naimen2 = Node.InnerText;
                    break;
                case "Naimen3":
                    Naimen3 = Node.InnerText;
                    break;
                case "Kol":
                    Kol = Node.InnerText;
                    break;
                case "EdIzm":
                    EdIzm = Node.InnerText;
                    break;
            }
        }

        //Последующее обнуление данных для заполнения, так же для цикла
        public void SetNullVariables()
        {
            Format = null;
            Obozn = null;
            Naimen0 = null;
            Order = null;
            Prim = null;
            Pos = null;
            Naimen1 = null;
            Naimen2 = null;
            Kol = null;
            EdIzm = null;
        }
    }
}
